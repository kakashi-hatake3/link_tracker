from urllib.parse import urlparse

from telethon import TelegramClient, events
from telethon.events import NewMessage
from telethon.tl.functions.bots import SetBotCommandsRequest
from telethon.tl.types import BotCommand, BotCommandScopeDefault

from src.scrapper_client import ScrapperClient
from src.storage import Storage

HELP_MESSAGE = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/help - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/track <url> [description] - –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
/untrack <url> - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫
"""


class BotHandler:
    def __init__(self, client: TelegramClient, storage: Storage) -> None:
        self.client = client
        self.storage = storage
        self.scrapper = ScrapperClient()
        self._setup_handlers()

    @classmethod
    async def create(cls, client: TelegramClient, storage: Storage) -> "BotHandler":
        """–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ BotHandler."""
        handler = cls(client, storage)
        await handler._register_commands()
        return handler

    async def _register_commands(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ Telegram."""
        commands = [
            BotCommand(command="start", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand(command="help", description="–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
            BotCommand(command="track", description="–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏"),
            BotCommand(command="untrack", description="–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏"),
            BotCommand(command="list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫"),
        ]
        await self.client(
            SetBotCommandsRequest(
                scope=BotCommandScopeDefault(),
                lang_code="ru",
                commands=commands,
            ),
        )

    def _setup_handlers(self) -> None:
        self.client.add_event_handler(self._start_handler, events.NewMessage(pattern="/start"))
        self.client.add_event_handler(self._help_handler, events.NewMessage(pattern="/help"))
        self.client.add_event_handler(self._track_handler, events.NewMessage(pattern="/track"))
        self.client.add_event_handler(self._untrack_handler, events.NewMessage(pattern="/untrack"))
        self.client.add_event_handler(self._list_handler, events.NewMessage(pattern="/list"))
        self.client.add_event_handler(
            self._unknown_command_handler,
            events.NewMessage(pattern="/[a-zA-Z]+"),
        )

    async def _start_handler(self, event: NewMessage.Event) -> None:
        chat_id = event.chat_id
        self.storage.add_user(chat_id)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Ç –≤ scrapper API
        if await self.scrapper.register_chat(chat_id):
            await event.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        else:
            await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def _help_handler(self, event: NewMessage.Event) -> None:
        await event.reply(HELP_MESSAGE)

    async def _track_handler(self, event: NewMessage.Event) -> None:
        max_split = 2
        if not event.message.text:
            return

        parts = event.message.text.split(maxsplit=max_split)
        if len(parts) < max_split:
            await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return

        url = parts[1]
        description = parts[2] if len(parts) > max_split else None

        try:
            parsed_url = urlparse(url)
            if not all([parsed_url.scheme, parsed_url.netloc]):
                raise ValueError("Invalid URL")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ scrapper API
            link_response = await self.scrapper.add_link(event.chat_id, url, description)
            if link_response:
                await event.reply(f"–°—Å—ã–ª–∫–∞ {url} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            else:
                await event.reply(
                    "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.",
                )
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e!s}")

    async def _untrack_handler(self, event: NewMessage.Event) -> None:
        max_split = 2
        if not event.message.text:
            return

        parts = event.message.text.split()
        if len(parts) < max_split:
            await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return

        url = parts[1]
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ scrapper API
            link_response = await self.scrapper.remove_link(event.chat_id, url)
            if link_response:
                await event.reply(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ {url} –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.")
            else:
                await event.reply("–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e!s}")

    async def _list_handler(self, event: NewMessage.Event) -> None:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ scrapper API
            links = await self.scrapper.get_links(event.chat_id)

            if not links:
                await event.reply("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
                return

            message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:\n\n"
            for link in links:
                message += f"üîó {link.url}"
                if link.tags:
                    message += f" - {', '.join(link.tags)}"
                message += "\n"

            await event.reply(message)
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫: {e!s}")

    async def _unknown_command_handler(self, event: NewMessage.Event) -> None:
        if event.message.text and event.message.text.startswith("/"):
            known_commands = {"/start", "/help", "/track", "/untrack", "/list", "chat_id"}
            command = event.message.text.split()[0]
            if command not in known_commands:
                await event.reply(
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                )
