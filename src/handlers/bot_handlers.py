from typing import Optional
from urllib.parse import urlparse

from telethon import TelegramClient, events
from telethon.events import NewMessage
from pydantic import HttpUrl

from src.models import Link
from src.storage import Storage

HELP_MESSAGE = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/help - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/track <url> [description] - –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
/untrack <url> - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫
"""

class BotHandler:
    def __init__(self, client: TelegramClient, storage: Storage):
        self.client = client
        self.storage = storage
        self._setup_handlers()

    def _setup_handlers(self) -> None:
        self.client.add_event_handler(self._start_handler, events.NewMessage(pattern='/start'))
        self.client.add_event_handler(self._help_handler, events.NewMessage(pattern='/help'))
        self.client.add_event_handler(self._track_handler, events.NewMessage(pattern='/track'))
        self.client.add_event_handler(self._untrack_handler, events.NewMessage(pattern='/untrack'))
        self.client.add_event_handler(self._list_handler, events.NewMessage(pattern='/list'))
        self.client.add_event_handler(self._unknown_command_handler, events.NewMessage(pattern='/[a-zA-Z]+'))

    async def _start_handler(self, event: NewMessage.Event) -> None:
        self.storage.add_user(event.chat_id)
        await event.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

    async def _help_handler(self, event: NewMessage.Event) -> None:
        await event.reply(HELP_MESSAGE)

    async def _track_handler(self, event: NewMessage.Event) -> None:
        if not event.message.text:
            return
            
        parts = event.message.text.split(maxsplit=2)
        if len(parts) < 2:
            await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return

        url = parts[1]
        description = parts[2] if len(parts) > 2 else None

        try:
            parsed_url = urlparse(url)
            if not all([parsed_url.scheme, parsed_url.netloc]):
                raise ValueError("Invalid URL")
                
            link = Link(url=url, description=description)
            if self.storage.add_link(event.chat_id, link):
                await event.reply(f"–°—Å—ã–ª–∫–∞ {url} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            else:
                await event.reply("–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")

    async def _untrack_handler(self, event: NewMessage.Event) -> None:
        if not event.message.text:
            return
            
        parts = event.message.text.split()
        if len(parts) < 2:
            await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return

        url = parts[1]
        if self.storage.remove_link(event.chat_id, url):
            await event.reply(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ {url} –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.")
        else:
            await event.reply("–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")

    async def _list_handler(self, event: NewMessage.Event) -> None:
        links = self.storage.get_links(event.chat_id)
        if not links:
            await event.reply("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
            return

        message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:\n\n"
        for link in links:
            message += f"üîó {link.url}"
            if link.description:
                message += f" - {link.description}"
            message += "\n"
        
        await event.reply(message)

    async def _unknown_command_handler(self, event: NewMessage.Event):
        if event.message.text and event.message.text.startswith('/'):
            known_commands = {'/start', '/help', '/track', '/untrack', '/list', 'chat_id'}
            command = event.message.text.split()[0]
            if command not in known_commands:
                await event.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.") 